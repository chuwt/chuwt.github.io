<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nio on chuwt&#39;s blog</title>
    <link>https://chuwt.github.io/tags/nio/</link>
    <description>Recent content in nio on chuwt&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 26 Jul 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://chuwt.github.io/tags/nio/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NIO-evio源码分析 WIP</title>
      <link>https://chuwt.github.io/post/2021-07-26_nio-netpoll%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://chuwt.github.io/post/2021-07-26_nio-netpoll%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>开始之前 上一篇我们讲了一个evio，这节我们来看一看字节跳动开源的高性能nio库，netpoll 源码地址</description>
    </item>
    
    <item>
      <title>NIO-evio源码分析</title>
      <link>https://chuwt.github.io/post/2021-07-17_nio-evio%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sat, 17 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://chuwt.github.io/post/2021-07-17_nio-evio%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>开始之前 evio是一个小巧的golang实现的NIO包，阅读源码的实现可以更好的帮助我们学习和了解NIO 由于使用mac，所以下面的分析主要以</description>
    </item>
    
    <item>
      <title>NIO-Kqueue</title>
      <link>https://chuwt.github.io/post/2021-07-16_nio-kqueue/</link>
      <pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://chuwt.github.io/post/2021-07-16_nio-kqueue/</guid>
      <description>关键字 Kqueue Kevent Kevent_t Kqueue 创建一个kqueue监听队列，返回的是kq的文件描述符 1 kq, err := syscall.Kqueue() Kevent 监听方法，kq监听changes里注册的事件，将触发的事件放</description>
    </item>
    
  </channel>
</rss>